<?xml version="1.0" encoding="utf-8"?>
<Application x:Class="PaperLess_Emeeting.App" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:ReadPageModule" xmlns:properties="clr-namespace:PaperLess_Emeeting.Properties" xmlns:paperless_emeeting="clr-namespace:PaperLess_Emeeting">
  <Application.Resources>
    <ResourceDictionary>
      <ObjectDataProvider x:Key="Resources" MethodName="GetResourceInstance" ObjectType="{x:Type local:CulturesHelper}" />
      <ObjectDataProvider x:Key="CultureResourcesDS" ObjectType="{x:Type local:CulturesHelper}" />
      <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel VirtualizationMode="Recycling" />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <SolidColorBrush x:Key="ComboBoxNormalBorderBrush" Color="Black" />
      <SolidColorBrush x:Key="ComboBoxNormalBackgroundBrush" Color="#dcf3bc" />
      <SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="#888" />
      <SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="#eee" />
      <SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="#888" />
      <ControlTemplate x:Key="ComboBoxToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="20" />
          </Grid.ColumnDefinitions>
          <Border Name="Border" Grid.ColumnSpan="2" CornerRadius="0" BorderThickness="1, 1, 1, 1" BorderBrush="{StaticResource ComboBoxNormalBorderBrush}" Background="{StaticResource ComboBoxNormalBackgroundBrush}" />
          <Border Name="ButtonBorder" Grid.Column="1" Margin="1, 1, 1, 1" BorderBrush="#444" CornerRadius="0, 0, 0, 0" BorderThickness="0, 0, 0, 0" Background="{StaticResource ComboBoxNormalBackgroundBrush}" />
          <Path Name="Arrow" Grid.Column="1" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4" HorizontalAlignment="Center" Fill="#444" VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
          <Trigger Property="UIElement.IsMouseOver" Value="True">
            <Setter TargetName="ButtonBorder" Property="Panel.Background" Value="#FFF5F5F5" />
          </Trigger>
          <Trigger Property="ToggleButton.IsChecked" Value="True">
            <Setter TargetName="ButtonBorder" Property="Panel.Background" Value="#FFF5F5F5" />
            <Setter TargetName="Arrow" Property="Shape.Fill" Value="#FF8D979E" />
          </Trigger>
          <Trigger Property="UIElement.IsEnabled" Value="False">
            <Setter TargetName="Border" Property="Panel.Background" Value="{StaticResource ComboBoxDisabledBackgroundBrush}" />
            <Setter TargetName="ButtonBorder" Property="Panel.Background" Value="{StaticResource ComboBoxDisabledBackgroundBrush}" />
            <Setter TargetName="ButtonBorder" Property="Border.BorderBrush" Value="{StaticResource ComboBoxDisabledBorderBrush}" />
            <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}" />
            <Setter TargetName="Arrow" Property="Shape.Fill" Value="#999" />
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>
      <Style x:Key="AgendaComboBoxFlatStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="TextElement.Foreground" Value="#FF000000" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ComboBox}">
              <Grid>
                <ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="False" Template="{StaticResource ComboBoxToggleButtonTemplate}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                <ContentPresenter Name="ContentSite" Margin="5, 3, 23, 3" IsHitTestVisible="False" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3" IsReadOnly="{TemplateBinding IsReadOnly}" Visibility="Hidden" Background="#00FFFFFF" HorizontalAlignment="Left" VerticalAlignment="Center" Focusable="True">
                  <Control.Template>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                      <Border Name="PART_ContentHost" Focusable="False" />
                    </ControlTemplate>
                  </Control.Template>
                </TextBox>
                <Popup Name="Popup" Placement="Bottom" Focusable="False" AllowsTransparency="True" IsOpen="{TemplateBinding IsDropDownOpen}" PopupAnimation="Slide">
                  <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border Name="DropDownBorder" Background="#FFFFFFFF" Margin="0, 1, 0, 0" CornerRadius="0" BorderThickness="1,1,1,1" BorderBrush="{StaticResource ComboBoxNormalBorderBrush}" />
                    <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                      <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                    </ScrollViewer>
                  </Grid>
                </Popup>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="ItemsControl.HasItems" Value="False">
                  <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}" />
                </Trigger>
                <Trigger Property="ItemsControl.IsGrouping" Value="True">
                  <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                </Trigger>
                <Trigger Property="ComboBox.IsEditable" Value="True">
                  <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
                  <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                  <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="AgendaButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="1" />
        <Style.BasedOn>
          <Style TargetType="{x:Type ButtonBase}">
            <Setter Property="Focusable" Value="False" />
            <Setter Property="UIElement.Opacity" Value="1" />
            <Setter Property="FrameworkElement.Cursor" Value="Hand" />
            <Setter Property="Background" Value="#dcf3bc" />
            <Setter Property="Padding" Value="3,1" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="MinWidth" Value="0" />
            <Setter Property="MinHeight" Value="0" />
            <Setter Property="Foreground" Value="#525a46" />
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}" Triggers="">
                  <Border CornerRadius="4" Background="{TemplateBinding Background}">
                    <ContentPresenter Name="Content" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" RenderTransformOrigin="0.5,0.5" Uid="ContentPresenter_2" />
                  </Border>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
            <Style.Triggers>
              <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.3" />
              </Trigger>
            </Style.Triggers>
          </Style>
        </Style.BasedOn>
      </Style>
      <Style x:Key="{x:Type TextBlock}" TargetType="{x:Type TextBlock}">
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="TextWrapping" Value="Wrap" />
      </Style>
      <Style x:Key="myScrollViewerStyle1" TargetType="{x:Type ScrollViewer}">
        <Setter Property="VerticalScrollBarVisibility" Value="Hidden" />
        <Style.Triggers>
          <Trigger Property="UIElement.IsMouseOver" Value="True">
            <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
          </Trigger>
        </Style.Triggers>
      </Style>
      <Style x:Key="myScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Style.Triggers>
          <Trigger Property="UIElement.IsMouseOver" Value="True">
            <Setter Property="UIElement.Opacity" Value="0.9" />
          </Trigger>
          <Trigger Property="UIElement.IsMouseOver" Value="False">
            <Setter Property="UIElement.Opacity" Value="0" />
          </Trigger>
        </Style.Triggers>
      </Style>
      <Style x:Key="myScrollViewerStyle2" TargetType="{x:Type ScrollViewer}">
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="BorderBrush" Value="#FFFF0000" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollViewer}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollContentPresenter Grid.ColumnSpan="2" Grid.RowSpan="2" />
                <ScrollBar Name="PART_VerticalScrollBar" Grid.Column="1" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Style="{StaticResource myScrollBarStyle}" />
                <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Style="{StaticResource myScrollBarStyle}" />
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
      </Style>
      <Style x:Key="{x:Type Label}" TargetType="{x:Type Label}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
      </Style>
      <Style x:Key="{x:Type Image}" TargetType="{x:Type Image}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
      </Style>
      <Style x:Key="ImageDownUp" TargetType="{x:Type Image}">
        <Setter Property="RenderTransform">
          <Setter.Value>
            <ScaleTransform ScaleX="1" ScaleY="1" />
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <EventTrigger RoutedEvent="Image.PreviewMouseLeftButtonDown">
            <EventTrigger.Actions>
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" From="1" To=".9" Duration="0:0:0.1" />
                  <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" From="1" To=".9" Duration="0:0:0.1" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger.Actions>
          </EventTrigger>
          <EventTrigger RoutedEvent="Image.PreviewMouseLeftButtonUp">
            <EventTrigger.Actions>
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" From=".9" To="1" Duration="0:0:0.1" />
                  <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" From=".9" To="1" Duration="0:0:0.1" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger.Actions>
          </EventTrigger>
        </Style.Triggers>
      </Style>
      <Style x:Key="CanvasDownUp" TargetType="{x:Type Canvas}">
        <Setter Property="RenderTransform">
          <Setter.Value>
            <ScaleTransform ScaleX="1" ScaleY="1" />
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <EventTrigger RoutedEvent="Canvas.PreviewMouseLeftButtonDown">
            <EventTrigger.Actions>
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" From="1" To=".9" Duration="0:0:0.1" />
                  <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" From="1" To=".9" Duration="0:0:0.1" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger.Actions>
          </EventTrigger>
          <EventTrigger RoutedEvent="Canvas.PreviewMouseLeftButtonUp">
            <EventTrigger.Actions>
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" From=".9" To="1" Duration="0:0:0.1" />
                  <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" From=".9" To="1" Duration="0:0:0.1" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger.Actions>
          </EventTrigger>
        </Style.Triggers>
      </Style>
      <Style x:Key="RadioButtonDownUp" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RadioButton}">
              <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" Uid="Border_40">
                <ContentPresenter Name="Content" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" RenderTransformOrigin="0.5,0.5" Uid="ContentPresenter_3" />
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsPressed" Value="True">
                  <Setter TargetName="Content" Property="RenderTransform">
                    <Setter.Value>
                      <ScaleTransform ScaleY="0.9" ScaleX="0.9" />
                    </Setter.Value>
                  </Setter>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.BasedOn>
          <Style TargetType="{x:Type ToggleButton}">
            <Style.BasedOn>
              <Style TargetType="{x:Type ButtonBase}">
                <Setter Property="Focusable" Value="False" />
                <Setter Property="UIElement.Opacity" Value="1" />
                <Setter Property="FrameworkElement.Cursor" Value="Hand" />
                <Setter Property="Background" Value="#00FFFFFF" />
                <Setter Property="Padding" Value="3,1" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="MinWidth" Value="0" />
                <Setter Property="MinHeight" Value="0" />
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                      <Border Background="{TemplateBinding Background}" Uid="Border_39">
                        <ContentPresenter Name="Content" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" RenderTransformOrigin="0.5,0.5" Uid="ContentPresenter_2" />
                      </Border>
                      <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                          <Setter TargetName="Content" Property="RenderTransform">
                            <Setter.Value>
                              <ScaleTransform ScaleY="1.1" ScaleX="1.1" />
                            </Setter.Value>
                          </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                          <Setter TargetName="Content" Property="RenderTransform">
                            <Setter.Value>
                              <ScaleTransform ScaleY="0.9" ScaleX="0.9" />
                            </Setter.Value>
                          </Setter>
                        </Trigger>
                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
                <Style.Triggers>
                  <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="UIElement.Opacity" Value="0.3" />
                  </Trigger>
                  <Trigger Property="UIElement.IsMouseOver" Value="True">
                    <Setter Property="UIElement.Opacity" Value="1.1" />
                  </Trigger>
                </Style.Triggers>
              </Style>
            </Style.BasedOn>
            <Style.Triggers>
              <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
              </Trigger>
              <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="UIElement.Opacity" Value="1" />
              </Trigger>
            </Style.Triggers>
          </Style>
        </Style.BasedOn>
      </Style>
    </ResourceDictionary>
  </Application.Resources>
</Application>